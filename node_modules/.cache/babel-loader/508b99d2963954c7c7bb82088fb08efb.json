{"ast":null,"code":"import uniq from 'ramda/src/uniq';\n\nasync function getOscarCategories(ceremonyNum) {\n  const fileResponse = await fetch(`/Data/${ceremonyNum}.json`);\n  return await fileResponse.json();\n}\n\nexport async function getAllCategories() {\n  let categories = [];\n\n  for (let i = 1; i <= 93; i++) {\n    const oscarCategories = await getOscarCategories(i);\n    categories = categories.concat(oscarCategories.map(category => category.name));\n  }\n\n  return uniq(categories);\n}\nexport async function getAwardData(categoryName, year) {\n  const ceremonyNum = year - 1928;\n  const oscarCategories = await getOscarCategories(ceremonyNum);\n  return oscarCategories.find(category => category.name === categoryName);\n}\nexport async function getRandomCategory(year) {\n  const ceremonyNum = year - 1928;\n  const oscarCategories = await getOscarCategories(ceremonyNum);\n  const index = Math.floor(Math.random() * oscarCategories.length);\n  return oscarCategories[index];\n}","map":{"version":3,"sources":["/Users/kylenazario/Developer/randomoscars.github.io/src/Local.connector.ts"],"names":["uniq","getOscarCategories","ceremonyNum","fileResponse","fetch","json","getAllCategories","categories","i","oscarCategories","concat","map","category","name","getAwardData","categoryName","year","find","getRandomCategory","index","Math","floor","random","length"],"mappings":"AACA,OAAOA,IAAP,MAAiB,gBAAjB;;AAEA,eAAeC,kBAAf,CAAkCC,WAAlC,EAA2E;AACzE,QAAMC,YAAY,GAAG,MAAMC,KAAK,CAAE,SAAQF,WAAY,OAAtB,CAAhC;AACA,SAAO,MAAMC,YAAY,CAACE,IAAb,EAAb;AACD;;AAED,OAAO,eAAeC,gBAAf,GAAqD;AAC1D,MAAIC,UAAoB,GAAG,EAA3B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,UAAMC,eAAe,GAAG,MAAMR,kBAAkB,CAACO,CAAD,CAAhD;AACAD,IAAAA,UAAU,GAAGA,UAAU,CAACG,MAAX,CACXD,eAAe,CAACE,GAAhB,CAAqBC,QAAD,IAAcA,QAAQ,CAACC,IAA3C,CADW,CAAb;AAGD;;AACD,SAAOb,IAAI,CAACO,UAAD,CAAX;AACD;AAED,OAAO,eAAeO,YAAf,CACLC,YADK,EAELC,IAFK,EAG+B;AACpC,QAAMd,WAAW,GAAGc,IAAI,GAAG,IAA3B;AACA,QAAMP,eAAe,GAAG,MAAMR,kBAAkB,CAACC,WAAD,CAAhD;AACA,SAAOO,eAAe,CAACQ,IAAhB,CAAsBL,QAAD,IAAcA,QAAQ,CAACC,IAAT,KAAkBE,YAArD,CAAP;AACD;AAED,OAAO,eAAeG,iBAAf,CAAiCF,IAAjC,EAA+C;AACpD,QAAMd,WAAW,GAAGc,IAAI,GAAG,IAA3B;AACA,QAAMP,eAAe,GAAG,MAAMR,kBAAkB,CAACC,WAAD,CAAhD;AACA,QAAMiB,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBb,eAAe,CAACc,MAA3C,CAAd;AACA,SAAOd,eAAe,CAACU,KAAD,CAAtB;AACD","sourcesContent":["import { OscarCategory, OscarYear } from './Models';\nimport uniq from 'ramda/src/uniq';\n\nasync function getOscarCategories(ceremonyNum: number): Promise<OscarYear> {\n  const fileResponse = await fetch(`/Data/${ceremonyNum}.json`);\n  return await fileResponse.json();\n}\n\nexport async function getAllCategories(): Promise<string[]> {\n  let categories: string[] = [];\n  for (let i = 1; i <= 93; i++) {\n    const oscarCategories = await getOscarCategories(i);\n    categories = categories.concat(\n      oscarCategories.map((category) => category.name)\n    );\n  }\n  return uniq(categories);\n}\n\nexport async function getAwardData(\n  categoryName: string,\n  year: number\n): Promise<OscarCategory | undefined> {\n  const ceremonyNum = year - 1928;\n  const oscarCategories = await getOscarCategories(ceremonyNum);\n  return oscarCategories.find((category) => category.name === categoryName);\n}\n\nexport async function getRandomCategory(year: number) {\n  const ceremonyNum = year - 1928;\n  const oscarCategories = await getOscarCategories(ceremonyNum);\n  const index = Math.floor(Math.random() * oscarCategories.length);\n  return oscarCategories[index];\n}\n"]},"metadata":{},"sourceType":"module"}