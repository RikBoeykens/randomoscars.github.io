{"ast":null,"code":"import uniq from 'ramda/src/uniq';\nexport async function getAllCategories() {\n  let categories = [];\n\n  for (let i = 1; i <= 93; i++) {\n    const fileResponse = await fetch(`/Data/${i}.json`);\n    const oscarCategories = await fileResponse.json();\n    categories = categories.concat(oscarCategories.map(category => category.name));\n  }\n\n  return uniq(categories);\n}\nexport async function getAwardData(categoryName, year) {\n  const ceremonyNum = year - 1928;\n  const fileResponse = await fetch(`/Data/${ceremonyNum}.json`);\n  const oscarCategories = await fileResponse.json();\n  return oscarCategories.find(category => category.name === categoryName);\n}","map":{"version":3,"sources":["/Users/kylenazario/Developer/randomoscars.github.io/src/Local.connector.ts"],"names":["uniq","getAllCategories","categories","i","fileResponse","fetch","oscarCategories","json","concat","map","category","name","getAwardData","categoryName","year","ceremonyNum","find"],"mappings":"AACA,OAAOA,IAAP,MAAiB,gBAAjB;AAEA,OAAO,eAAeC,gBAAf,GAAqD;AAC1D,MAAIC,UAAoB,GAAG,EAA3B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,UAAMC,YAAY,GAAG,MAAMC,KAAK,CAAE,SAAQF,CAAE,OAAZ,CAAhC;AACA,UAAMG,eAA0B,GAAG,MAAMF,YAAY,CAACG,IAAb,EAAzC;AACAL,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CACXF,eAAe,CAACG,GAAhB,CAAqBC,QAAD,IAAcA,QAAQ,CAACC,IAA3C,CADW,CAAb;AAGD;;AACD,SAAOX,IAAI,CAACE,UAAD,CAAX;AACD;AAED,OAAO,eAAeU,YAAf,CACLC,YADK,EAELC,IAFK,EAG+B;AACpC,QAAMC,WAAW,GAAGD,IAAI,GAAG,IAA3B;AACA,QAAMV,YAAY,GAAG,MAAMC,KAAK,CAAE,SAAQU,WAAY,OAAtB,CAAhC;AACA,QAAMT,eAA0B,GAAG,MAAMF,YAAY,CAACG,IAAb,EAAzC;AACA,SAAOD,eAAe,CAACU,IAAhB,CAAsBN,QAAD,IAAcA,QAAQ,CAACC,IAAT,KAAkBE,YAArD,CAAP;AACD","sourcesContent":["import { OscarCategory, OscarYear } from './Models';\nimport uniq from 'ramda/src/uniq';\n\nexport async function getAllCategories(): Promise<string[]> {\n  let categories: string[] = [];\n  for (let i = 1; i <= 93; i++) {\n    const fileResponse = await fetch(`/Data/${i}.json`);\n    const oscarCategories: OscarYear = await fileResponse.json();\n    categories = categories.concat(\n      oscarCategories.map((category) => category.name)\n    );\n  }\n  return uniq(categories);\n}\n\nexport async function getAwardData(\n  categoryName: string,\n  year: number\n): Promise<OscarCategory | undefined> {\n  const ceremonyNum = year - 1928;\n  const fileResponse = await fetch(`/Data/${ceremonyNum}.json`);\n  const oscarCategories: OscarYear = await fileResponse.json();\n  return oscarCategories.find((category) => category.name === categoryName);\n}\n"]},"metadata":{},"sourceType":"module"}