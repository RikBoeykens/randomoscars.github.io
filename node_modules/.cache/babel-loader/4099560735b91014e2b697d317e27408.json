{"ast":null,"code":"import uniq from 'ramda/src/uniq';\n\nasync function getOscarCategories(ceremonyNum) {\n  const fileResponse = await fetch(`/Data/${ceremonyNum}.json`);\n  const storedCategories = await fileResponse.json();\n  const year = ceremonyNum + 1928;\n  return storedCategories.map(category => {\n    category.year = year;\n    return category;\n  });\n}\n\nexport async function getAllCategories() {\n  let categories = [];\n\n  for (let i = 1; i <= 93; i++) {\n    const oscarCategories = await getOscarCategories(i);\n    categories = categories.concat(oscarCategories.map(category => category.name));\n  }\n\n  return uniq(categories);\n}\nexport async function getAwardData(categoryName, year) {\n  const ceremonyNum = year - 1928;\n  const oscarCategories = await getOscarCategories(ceremonyNum);\n  return oscarCategories.find(category => category.name === categoryName);\n}\nexport async function randomize() {\n  const ceremonyNum = Math.floor(Math.random() * 92) + 1;\n  const oscarCategories = await getOscarCategories(ceremonyNum);\n  const index = Math.floor(Math.random() * oscarCategories.length);\n  const categoryName = oscarCategories[index].name;\n  return [categoryName, ceremonyNum + 1928];\n}","map":{"version":3,"sources":["/Users/kylenazario/Developer/randomoscars.github.io/src/Local.connector.ts"],"names":["uniq","getOscarCategories","ceremonyNum","fileResponse","fetch","storedCategories","json","year","map","category","getAllCategories","categories","i","oscarCategories","concat","name","getAwardData","categoryName","find","randomize","Math","floor","random","index","length"],"mappings":"AACA,OAAOA,IAAP,MAAiB,gBAAjB;;AAEA,eAAeC,kBAAf,CAAkCC,WAAlC,EAA2E;AACzE,QAAMC,YAAY,GAAG,MAAMC,KAAK,CAAE,SAAQF,WAAY,OAAtB,CAAhC;AACA,QAAMG,gBAA0D,GAC9D,MAAMF,YAAY,CAACG,IAAb,EADR;AAEA,QAAMC,IAAI,GAAGL,WAAW,GAAG,IAA3B;AACA,SAAOG,gBAAgB,CAACG,GAAjB,CAAsBC,QAAD,IAAc;AACxCA,IAAAA,QAAQ,CAACF,IAAT,GAAgBA,IAAhB;AACA,WAAOE,QAAP;AACD,GAHM,CAAP;AAID;;AAED,OAAO,eAAeC,gBAAf,GAAqD;AAC1D,MAAIC,UAAoB,GAAG,EAA3B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,UAAMC,eAAe,GAAG,MAAMZ,kBAAkB,CAACW,CAAD,CAAhD;AACAD,IAAAA,UAAU,GAAGA,UAAU,CAACG,MAAX,CACXD,eAAe,CAACL,GAAhB,CAAqBC,QAAD,IAAcA,QAAQ,CAACM,IAA3C,CADW,CAAb;AAGD;;AACD,SAAOf,IAAI,CAACW,UAAD,CAAX;AACD;AAED,OAAO,eAAeK,YAAf,CACLC,YADK,EAELV,IAFK,EAG+B;AACpC,QAAML,WAAW,GAAGK,IAAI,GAAG,IAA3B;AACA,QAAMM,eAAe,GAAG,MAAMZ,kBAAkB,CAACC,WAAD,CAAhD;AACA,SAAOW,eAAe,CAACK,IAAhB,CAAsBT,QAAD,IAAcA,QAAQ,CAACM,IAAT,KAAkBE,YAArD,CAAP;AACD;AAED,OAAO,eAAeE,SAAf,GAA2B;AAChC,QAAMjB,WAAW,GAAGkB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,IAAiC,CAArD;AACA,QAAMT,eAAe,GAAG,MAAMZ,kBAAkB,CAACC,WAAD,CAAhD;AACA,QAAMqB,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,eAAe,CAACW,MAA3C,CAAd;AACA,QAAMP,YAAY,GAAGJ,eAAe,CAACU,KAAD,CAAf,CAAuBR,IAA5C;AACA,SAAO,CAACE,YAAD,EAAef,WAAW,GAAG,IAA7B,CAAP;AACD","sourcesContent":["import { OscarCategory, OscarYear } from './Models';\nimport uniq from 'ramda/src/uniq';\n\nasync function getOscarCategories(ceremonyNum: number): Promise<OscarYear> {\n  const fileResponse = await fetch(`/Data/${ceremonyNum}.json`);\n  const storedCategories: Array<OscarCategory & { year?: number }> =\n    await fileResponse.json();\n  const year = ceremonyNum + 1928;\n  return storedCategories.map((category) => {\n    category.year = year;\n    return category;\n  });\n}\n\nexport async function getAllCategories(): Promise<string[]> {\n  let categories: string[] = [];\n  for (let i = 1; i <= 93; i++) {\n    const oscarCategories = await getOscarCategories(i);\n    categories = categories.concat(\n      oscarCategories.map((category) => category.name)\n    );\n  }\n  return uniq(categories);\n}\n\nexport async function getAwardData(\n  categoryName: string,\n  year: number\n): Promise<OscarCategory | undefined> {\n  const ceremonyNum = year - 1928;\n  const oscarCategories = await getOscarCategories(ceremonyNum);\n  return oscarCategories.find((category) => category.name === categoryName);\n}\n\nexport async function randomize() {\n  const ceremonyNum = Math.floor(Math.random() * 92) + 1;\n  const oscarCategories = await getOscarCategories(ceremonyNum);\n  const index = Math.floor(Math.random() * oscarCategories.length);\n  const categoryName = oscarCategories[index].name;\n  return [categoryName, ceremonyNum + 1928] as const;\n}\n"]},"metadata":{},"sourceType":"module"}