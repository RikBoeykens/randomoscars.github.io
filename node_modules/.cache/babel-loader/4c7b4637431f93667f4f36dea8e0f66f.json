{"ast":null,"code":"export async function queryWolframAlpha(category, year) {\n  const queryParams = ['appid=7E34XY-YUPTQPH3YV', `input=${encodeURIComponent(`oscars ${category} nominees ${year}`)}`, 'output=json', 'format=plaintext'];\n  const url = `http://api.wolframalpha.com/v1/query?${queryParams.join('&')}`;\n  const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(url)}`);\n  const data = await response.json();\n  const queryResponse = JSON.parse(data.contents);\n  const answerPod = queryResponse.queryresult.pods.find(pod => pod.id === 'Result');\n  if (!answerPod) return 'Could not parse Wolfram Alpha results';\n  if (!answerPod.subpods.length) return 'No Wolfram Alpha results returned';\n  return answerPod.subpods[0].plaintext;\n}","map":{"version":3,"sources":["/Users/kylenazario/Developer/randomoscars.github.io/src/WolframAlpha.connector.ts"],"names":["queryWolframAlpha","category","year","queryParams","encodeURIComponent","url","join","response","fetch","data","json","queryResponse","JSON","parse","contents","answerPod","queryresult","pods","find","pod","id","subpods","length","plaintext"],"mappings":"AAEA,OAAO,eAAeA,iBAAf,CACLC,QADK,EAELC,IAFK,EAGY;AACjB,QAAMC,WAAW,GAAG,CAClB,yBADkB,EAEjB,SAAQC,kBAAkB,CAAE,UAASH,QAAS,aAAYC,IAAK,EAArC,CAAwC,EAFjD,EAGlB,aAHkB,EAIlB,kBAJkB,CAApB;AAMA,QAAMG,GAAG,GAAI,wCAAuCF,WAAW,CAACG,IAAZ,CAAiB,GAAjB,CAAsB,EAA1E;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCJ,kBAAkB,CAACC,GAAD,CAAM,EADpC,CAA5B;AAGA,QAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,QAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACK,QAAhB,CAAtB;AAEA,QAAMC,SAAS,GAAGJ,aAAa,CAACK,WAAd,CAA0BC,IAA1B,CAA+BC,IAA/B,CACfC,GAAD,IAASA,GAAG,CAACC,EAAJ,KAAW,QADJ,CAAlB;AAGA,MAAI,CAACL,SAAL,EAAgB,OAAO,uCAAP;AAEhB,MAAI,CAACA,SAAS,CAACM,OAAV,CAAkBC,MAAvB,EAA+B,OAAO,mCAAP;AAC/B,SAAOP,SAAS,CAACM,OAAV,CAAkB,CAAlB,EAAqBE,SAA5B;AACD","sourcesContent":["import { WAQueryResponse } from './Models';\n\nexport async function queryWolframAlpha(\n  category: string,\n  year: number\n): Promise<string> {\n  const queryParams = [\n    'appid=7E34XY-YUPTQPH3YV',\n    `input=${encodeURIComponent(`oscars ${category} nominees ${year}`)}`,\n    'output=json',\n    'format=plaintext',\n  ];\n  const url = `http://api.wolframalpha.com/v1/query?${queryParams.join('&')}`;\n  const response = await fetch(\n    `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`\n  );\n  const data = await response.json();\n  const queryResponse = JSON.parse(data.contents) as WAQueryResponse;\n\n  const answerPod = queryResponse.queryresult.pods.find(\n    (pod) => pod.id === 'Result'\n  );\n  if (!answerPod) return 'Could not parse Wolfram Alpha results';\n\n  if (!answerPod.subpods.length) return 'No Wolfram Alpha results returned';\n  return answerPod.subpods[0].plaintext;\n}\n"]},"metadata":{},"sourceType":"module"}